create and print weighted undircted adj.list
def addNode(v):
    if v in graph:
        print(v, "is already avaliable")
    else:
        
        graph[v]=[]
        
def show():
    for x in graph:
        print(x,".",graph[x])

def addedge(node1, node2,w):
    if node1 not in graph:
        print(node1, "is not available")
    elif node2 not in graph:
        print(node2, "is not available")
    else:
        a=(node2,w)
        b=(node1,w)
        graph[node1].append(a)
        graph[node2].append(b)
graph={}
while True:
    print()
    print("1. Add Node \n2. Add Edge \n3. Print Graph \n4. Exit")
    ch = int(input("Enter your choice: "))
    if ch == 1:
        v = input("Enter node: ")
        addNode(v)
    elif ch == 2:
        node1 = input("Enter node1: ")
        node2 = input("Enter node2: ")
        w=int(input("weight:"))
        addedge(node1, node2,w)
    elif ch == 3:
        show()
    elif ch == 4:
        break
    else:
        print("Invalid choice")
output-------------------
1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 1
Enter node: a

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 1
Enter node: b

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 1
Enter node: c

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 2
Enter node1: a
Enter node2: b
weight:3

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 2
Enter node1: a
Enter node2: c
weight:5

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 2
Enter node1: b
Enter node2: c
weight:5

1. Add Node 
2. Add Edge 
3. Print Graph 
4. Exit
Enter your choice: 3
a . [('b', 3), ('c', 5)]
b . [('a', 3), ('c', 5)]
c . [('a', 5), ('b', 5)]